# entity_pipeline_workflow.yaml
# Sub-workflow: loop over batches and invoke a single Cloud Run Job per batch

main:
  params: [payload]
  steps:
    # [0] Initialize project and region
    - init_vars:
        assign:
          - projectId: "horse-predictor-v2"
          - region:    "europe-central2"
    - log_init:
        call: sys.log
        args:
          text: "üîß Initialized projectId=${projectId}, region=${region}"
          severity: INFO

    # [1] Loop over batches (0 to payload.batches-1)
    - batchLoop:
        for:
          value: i
          range:
            - 0
            - ${payload.batches - 1}
          steps:
            # [1a] Log start of iteration
            - log_iteration_start:
                call: sys.log
                args:
                  text: "‚û°Ô∏è Batch ${i + 1}/${payload.batches}: startId=${payload.startId + i * payload.batchSize}, batchSize=${payload.batchSize}"
                  severity: INFO

            # [1b] Build Cloud Run invocation
            - buildUrls:
                assign:
                  - runUrl: >-
                      ${
                        "https://run.googleapis.com/v1/projects/" + projectId +
                        "/locations/" + region + "/jobs/" + payload.serviceName + ":run"
                      }
                  - jobName: >-
                      ${
                        "projects/" + projectId +
                        "/locations/" + region + "/jobs/" + payload.serviceName
                      }
            - log_urls:
                call: sys.log
                args:
                  text: "üîó URL=${runUrl}"
                  severity: DEBUG

            # [1c] Invoke the scraper job
            - runBatchJob:
                call: googleapis.run.v1.namespaces.jobs.run
                args:
                  name: ${"namespaces/" + projectId + "/jobs/" + payload.serviceName}
                  location: ${region}
                  body:
                    overrides:
                      containerOverrides:
                        - args:
                            - ${ string(payload.startId + i * payload.batchSize) }
                            - ${ string(payload.batchSize) }
                result: jobResponse
            - log_job_resp:
                call: sys.log
                args:
                  text: "‚úÖ Job response: ${jobResponse.status.name || jobResponse.status.code}"
                  severity: INFO

    # [2] Completion log and return
    - log_done:
        call: sys.log
        args:
          text: "üèÅ Completed ${payload.batches} batches for ${payload.serviceName}"
          severity: INFO
    - return:
        return: ${payload.batches}
